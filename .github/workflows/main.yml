name: Build & Deploy chronos-auth

on:
  push:
    branches:
      - main

jobs:
  build-deploy:
    name: Build and deploy to DockerHub
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: 21

      - name: Create Private and Public Key Files
        run: |
          mkdir -p src/main/resources/keys
          echo "${{ secrets.PRIVATE_KEY_BASE64 }}" | base64 --decode > src/main/resources/keys/private.pem
          echo "${{ secrets.PUBLIC_KEY_BASE64 }}" | base64 --decode > src/main/resources/keys/public.pem
          chmod 600 src/main/resources/keys/private.pem
          chmod 644 src/main/resources/keys/public.pem

      - name: Build the application
        run: mvn -B clean package -DskipTests --file pom.xml

      - name: Build Docker Image
        uses: docker/build-push-action@v2
        with:
          context: .
          dockerfile: Dockerfile
          push: false
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/chronos-auth:latest

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Push to Docker Hub
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/chronos-auth:latest

#  deploy:
#    name: Deploy to AWS ECS
#    runs-on: ubuntu-latest
#    needs: build-and-push
#    steps:
#      - name: Checkout Repository
#        uses: actions/checkout@v3
#
#      - name: Configure AWS Credentials
#        uses: aws-actions/configure-aws-credentials@v2
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: ${{ secrets.AWS_REGION }}
#
#      - name: Update ECS Task Definition
#        id: task-def
#        uses: aws-actions/amazon-ecs-render-task-definition@v1
#        with:
#          task-definition: ecs-task-definition.json
#          container-name: zenith-algorithm-docker-image
#          image: ${{ secrets.DOCKER_HUB_USERNAME }}/zenith-algorithm:latest
#
#      - name: Deploy New Task Definition to ECS Service
#        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
#        with:
#          task-definition: ${{ steps.task-def.outputs.task-definition }}
#          service: ${{ secrets.ECS_SERVICE_NAME }}
#          cluster: ${{ secrets.ECS_CLUSTER_NAME }}
#          wait-for-service-stability: true